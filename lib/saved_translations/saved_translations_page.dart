import 'dart:convert';

import 'package:arasaac_translator/arasaac/model.dart';
import 'package:arasaac_translator/saved_translations/saved_translations_repository.dart';
import 'package:flutter/material.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

import 'model.dart';

/// `SavedTranslationsPage` is a StatefulWidget that displays a list of saved translations.
///
/// It takes a function `onLoad` as a required parameter in its constructor. This function is called when a saved translation is selected.
///
/// The state for this widget is managed by `_SavedTranslationsPageState`.
class SavedTranslationsPage extends StatefulWidget {
  /// Creates a `SavedTranslationsPage` widget.
  ///
  /// The [onLoad] function must not be null. It is called when a saved translation is selected.
  const SavedTranslationsPage({super.key, required this.onLoad});

  /// This is the function that is called when a saved translation is selected.
  ///
  /// It takes three parameters:
  /// - a `String` [name] which is the name of the saved translation,
  /// - a `String` [originalText] which is the original text of the saved translation,
  /// - a `List<List<TranslationResponse>>` [translationResponses] which is the list of translation responses for the saved translation.
  final Function(String name, String originalText, List<List<TranslationResponse>> translationResponses) onLoad;

  /// Creates the mutable state for this widget at a given location in the tree.
  @override
  State<StatefulWidget> createState() => _SavedTranslationsPageState();
}

/// `_SavedTranslationsPageState` is the state for `SavedTranslationsPage`.
///
/// It manages a list of `SavedTranslation` objects and handles the deletion of these objects.
class _SavedTranslationsPageState extends State<SavedTranslationsPage> {
  /// A list of `SavedTranslation` objects.
  List<SavedTranslation> savedTranslations = [];

  /// Called when this object is inserted into the tree.
  ///
  /// It fetches the list of saved translations from the `SavedTranslationsRepository` and updates the state.
  @override
  void initState() {
    super.initState();
    SavedTranslationsRepository.instance.list().then((value) {
      setState(() {
        savedTranslations = value;
      });
    });
  }

  /// Describes the part of the user interface represented by this widget.
  ///
  /// It returns a `Scaffold` widget that contains a list of saved translations. Each translation is represented by a `Card` widget.
  /// The `Card` widget contains a `ListTile` with the name of the translation and a delete button.
  /// When the delete button is pressed, a confirmation dialog is shown. If the user confirms, the translation is deleted.
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(AppLocalizations.of(context)!.savedTranslations)),
      body: savedTranslations.isEmpty
          ? Center(child: Text(AppLocalizations.of(context)!.noSavedTranslations))
          : ListView.builder(
              padding: const EdgeInsets.all(8),
              itemCount: savedTranslations.length,
              itemBuilder: (context, index) {
                Iterable l = jsonDecode(savedTranslations[index].json);
                List<List<TranslationResponse>> translationResponses =
                    List<List<TranslationResponse>>.from(l.map((model) => List<TranslationResponse>.from(model.map((e) => TranslationResponse.fromJson(e)))));

                /// This is a string that represents the subtitle of the ListTile.
                ///
                /// It is generated by folding over the `translationResponses` list. The fold operation combines all elements of the list into a single string.
                ///
                /// For each element in the `translationResponses` list, it folds over the element (which is also a list) and combines all its elements into a single string.
                /// This string is then appended to the `previousValue` string with a newline character in between.
                ///
                /// The resulting string is a concatenation of all translation responses, each on a new line.
                final subtitle = translationResponses.fold(
                    "", (previousValue, element) => "$previousValue\n${element.fold("", (previousValue, element) => "$previousValue ${element.text}")}");

                return Card(
                  child: ListTile(
                    title: Text(savedTranslations[index].name),
                    visualDensity: VisualDensity.compact,
                    isThreeLine: true,
                    dense: true,
                    subtitle: Text(
                      subtitle,
                      overflow: TextOverflow.ellipsis,
                    ),
                    trailing: IconButton(
                      icon: const Icon(Icons.delete),
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (BuildContext context) {
                            return AlertDialog(
                              title: Text(AppLocalizations.of(context)!.confirm),
                              content: Text(AppLocalizations.of(context)!.areYouSure),
                              actions: <Widget>[
                                TextButton(
                                  child: Text(AppLocalizations.of(context)!.cancel),
                                  onPressed: () {
                                    Navigator.of(context).pop();
                                  },
                                ),
                                TextButton(
                                  child: Text(AppLocalizations.of(context)!.confirm),
                                  onPressed: () {
                                    SavedTranslationsRepository.instance.delete(savedTranslations[index].name).then((value) {
                                      setState(() {
                                        savedTranslations.removeAt(index);
                                      });
                                    });
                                    Navigator.of(context).pop();
                                  },
                                ),
                              ],
                            );
                          },
                        );
                      },
                    ),
                    onTap: () {
                      widget.onLoad(savedTranslations[index].name, savedTranslations[index].originalText, translationResponses);
                      Navigator.pop(context);
                    },
                  ),
                );
              },
            ),
    );
  }
}
